//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.6

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "source")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub check_sum: String,
    pub title: String,
    pub description: String,
    pub path: String,
    pub mime: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::source_author_mapping::Entity")]
    SourceAuthorMapping,
    #[sea_orm(has_many = "super::source_tag_mapping::Entity")]
    SourceTagMapping,
}

impl Related<super::source_author_mapping::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SourceAuthorMapping.def()
    }
}

impl Related<super::source_tag_mapping::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SourceTagMapping.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
